name: Semantic Versioning & Linting

on:
  workflow_dispatch:
    inputs:
      manually_trigger:
        description: "Manually trigger version bump"
        required: false
        default: "false"
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging

jobs:
  versioning:
    name: Semantic Versioning
    # Skip job if commit message contains [skip-version]
    if: ${{ !contains(github.event.head_commit.message, '[skip-version]') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Determine version bump type
        id: bump_type
        run: |
          # Analyze the most recent commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)

          if [[ "$COMMIT_MSG" == *"[release]"* ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" == *"[feat]"* ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" == *"[skip-version]"* ]]; then
            echo "type=none" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" == *"[fix]"* ]]; then
            # Default to patch
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

          echo "Determined version bump type: $(cat $GITHUB_OUTPUT | grep type | cut -d= -f2)"

      - name: Get current version from package.json
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: new_version
        if: steps.bump_type.outputs.type != 'none'
        run: |
          CURRENT_VERSION=${{ steps.current_version.outputs.version }}
          BUMP_TYPE=${{ steps.bump_type.outputs.type }}

          # Split version into components
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          # Calculate new version based on bump type
          if [[ "$BUMP_TYPE" == "major" ]]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [[ "$BUMP_TYPE" == "minor" ]]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          else
            # patch
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          fi

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update package.json version
        if: steps.bump_type.outputs.type != 'none'
        run: |
          NEW_VERSION=${{ steps.new_version.outputs.version }}

          # Update package.json
          node -e "
            const fs = require('fs');
            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            packageJson.version = '$NEW_VERSION';
            fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2) + '\n');
          "

          echo "Updated package.json to version $NEW_VERSION"

      - name: Commit updated package.json
        if: steps.bump_type.outputs.type != 'none'
        run: |
          git add package.json
          git commit -m "Update version to v${{ steps.new_version.outputs.version }} [skip-version]"
          git push origin HEAD

      - name: Create and push tag
        if: steps.bump_type.outputs.type != 'none'
        run: |
          TAG_NAME="v${{ steps.new_version.outputs.version }}"
          git tag $TAG_NAME
          git push origin $TAG_NAME
          echo "Successfully created tag $TAG_NAME"
